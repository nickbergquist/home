@{
    ViewData["Description"] = "Node Express builds using Gulp view";
    ViewData["Title"] = "Node Express builds using Gulp";
    ViewData["Page class"] = "page-code";
}

@section CssHead {
    @{await Html.RenderPartialAsync("_CodeBlockPrismStylesPartial"); }
}

<h1>@ViewData["Title"]</h1>
<p>
    The 'Express application generator' at <a href="https://expressjs.com/en/starter/generator.html">https://expressjs.com/en/starter/generator.html</a> is a
    great starting point, providing a basic <a href="https://expressjs.com/">Express</a> web application server framework for the <a href="https://nodejs.org/en/">node.js</a> platform. But as the Express document states, it's just one of many ways to structure Express apps.
</p>

<p>
    The present project is concerned with developing the default application created using the 'Express application generator'. This will provide
    a full <a href="http://sass-lang.com/">SASS</a> implementation, <a href="https://pugjs.org/">Pug</a> templating and a comprehensive <a href="https://gulpjs.com/">Gulp</a> build process of front-end resources under Express 'development' or 'production' environments.
    The project can be cloned from: <a href="https://github.com/nickbergquist/node-express-sass-workflow">https://github.com/nickbergquist/node-express-sass-workflow</a>
</p>

<h2>Using Express middleware</h2>

<p>
    One way to build resources is, for example, to use <a href="https://github.com/sass/node-sass-middleware">node-sass</a> and <a href="https://www.npmjs.com/package/postcss-middleware">postCSS</a>, etc. -
    middleware within an Express application which is itself a series of middleware function calls. The default application built with the "Express application generator" using the <code class="code-inline">--css=sass</code> switch
    currently (as of 2017) does just this, using <a href="https://github.com/sass/node-sass-middleware">node-sass-middleware</a> to simply compile a <b>*.sass</b> file to CSS in the same directory with a
    source-map. Note that by default the generator sets <code class="code-inline">indentedSyntax: true</code> in the root <b>app.js</b> for the older syntax of SASS:
</p>

<pre><code class="language-javascript">var sassMiddleware = require('node-sass-middleware');

app.use(sassMiddleware({
  src: path.join(__dirname, 'public'),
  dest: path.join(__dirname, 'public'),
  indentedSyntax: true, // true = .sass and false = .scss
  sourceMap: true
}));
</code></pre>

<p>
    Furthermore, the build processing request can be passed from one middleware function in the stack to the next.
    So for example, in the <a href="https://github.com/sass/node-sass-middleware">node-sass-middleware documentation</a> there
    is an example of a way in which SASS stylesheets may be compiled in one middleware function and then CSS vendor-prefixing is
    accomplished in the subsequent middleware function:
</p>

<pre><code class="language-javascript">var connect = require('connect');
var sassMiddleware = require('node-sass-middleware');
var postcssMiddleware = require('postcss-middleware');
var autoprefixer = require('autoprefixer');
var path = require('path');
var http = require('http');
var app = connect();
var destPath = __dirname + '/public';
app.use(sassMiddleware({
    src: __dirname
  , response: false
  , dest: destPath
  , outputStyle: 'extended'
}));
app.use(postcssMiddleware({
  plugins: [autoprefixer()],
  src: function(req) {
    return path.join(destPath, req.url);
  }
}));

http.createServer(app).listen(3000);
</code></pre>

<p>
    This is all useful to know but in practical terms there is usually extensive build processing to be done on front-end resources. 
    And ultimately Gulp is about creating files whereas Express is responsible for routing and serving them. 
    So rather than have this done in <b>app.js</b> which should focus on application logic it seems sensible to engage a dedicated
    task-runner such as Gulp which can also be used to start both the Express server and the application itself. In Express 4.0
    this process is begun with a movement of the server object creation, server listening and server error handling away
    from <b>app.js</b> into <b>bin/www</b>.
</p>

<h2>Using Gulp</h2>

<p>
    Using the task-runner Gulp to build the front-end resources provides a straightforward way to:
</p>

<ul class="list-standard">
    <li>differentiate on the build files required for 'development' or 'production' environments</li>
    <li>apply linting or uniform coding standards to particular filetypes</li>
    <li>compile certain files and perform post-compilation tasks</li>
    <li>set up Gulp 'watch' tasks to automatically recompile and/or build specific files when they are edited</li>
    <li>restart the application when server-side Javascript files change using <a href="https://www.npmjs.com/package/gulp-nodemon">node-mon</a></li>
    <li>concatenate client-side Javascript files for fewer HTTP requests</li>
    <li>minify files removing all unneccessary code from build files without affecting functionality</li>
    <li>write source-maps so that debugging tools can map the built code back to the original source code</li>
</ul>

<p>
    In order to do this the application structure has been changed to facilitate building resources into two root directories, <b>build</b> or
    <b>dist</b> rather than the default <b>public</b> one that served as both the source and destination in the default application provided
    by the 'Express application generator'. A new source directory <b>assets</b> forms the working directory.
</p>

<h3>Creating the builds</h3>

<p>
    Once the project has been cloned and dependencies installed via npm open up a CLI in the root directory and either enter <code class="code-inline">gulp</code> for
    a 'development' build or <code class="code-inline">npm start</code> for a 'production' build. In either case the build directories and files will be cleared out prior
    to the build taking place so that in effect the application is running in either environment with only the build files required for that environment. In a real instance
    you may wish to have both builds coexisting on disk and only the application environment switched.
</p>

<p>
    If a 'development' build is made then entering <code class="code-inline">gulp</code> will run the Gulp 'default' task. If a 'production' build is required then
    running <code class="code-inline">npm start</code> node will search for a <code class="code-inline">scripts</code> object and then run the command in the associated value
    of a key named <code class="code-inline">start</code> in <b>package.json</b>:
</p>

<pre><code class="language-javascript">"scripts": {
    "start": "Set NODE_ENV=production&& gulp"
}
</code></pre>

<p>
    <span class="note">Note</span>: As can be seen this sets Express to run in a 'production' environment by setting <code class="code-inline">NODE_ENV=production</code> but note that if running under Linux or Mac OSX
    then the <code class="code-inline">set</code> command should be substituted with <code class="code-inline">export</code>. Also, resist the temptation to insert a space prior to the Javascript logical <code class="code-inline">&&</code> operator
    as this will cause the Express environment to be set to 'production ' (note space). Subsequent expectation that the string will be 'production' will be foiled without trimming.
</p>
<p>
    The command associated with the <code class="code-inline">start</code> key also runs a Gulp 'default' task. The difference being that there are two Gulp 'default' tasks in the root <b>gulpfile.js</b> conditionally switched dependent on environment:
</p>

<pre><code class="language-javascript">// gulp default tasks
if(process.env.NODE_ENV === 'production'){
    gulp.task('default', ['clean', 'publish']);
} else {
    gulp.task('default', ['clean', 'build', 'watch']);
}

gulp.task('build', ['build-css', 'build-pug', 'build-fonts', 'build-js'], () => {
    gulpUtil.log(gulpUtil.colors.green('Application built'));
    nodemonInit();
});

gulp.task('publish', ['pub-css', 'pub-pug', 'pub-fonts', 'pub-js'], () => {
    gulpUtil.log(gulpUtil.colors.green('Application published. No watch on assets'));
    nodeInit();
});
</code></pre>

<h4>Development build details</h4>

<p>
    In a 'development' build the following takes place:
</p>

<ul class="list-standard">
    <li>linting (SASS) takes place</li>
    <li>compilation takes place</li>
    <li>post-compilation process of writing browser vendor-prefixes to CSS</li>
    <li>source-maps are written</li>
    <li><a href="https://www.npmjs.com/package/gulp-plumber">gulp-plumber</a> is used to prevent Gulp 'watch' tasks from ending if there is a syntax error, i.e., in SASS compilation, etc.</li>
    <li>files and directories in <b>assets</b> are processed or copied to the <b>build</b> directory</li>
    <li>files are not concatenated nor minified</li>
    <li>a Gulp 'watch' is established so that any changes to files in <b>assets</b> results in an immediate build process of those files following the steps above.</li>
    <li><a href="https://www.npmjs.com/package/gulp-nodemon">node-mon</a> restarts the application when changes to server-side Javascript files occur</li>
</ul>

<p>
    A notable absence from this build is use of <a href="https://www.npmjs.com/package/gulp-livereload">gulp-livereload</a> in the pipe. This automatically reloads the browser when there are changes to files. However, it requires
    browser-specific extensions, doesn't always work without saving a file twice and personally I find the delay in waiting for the reload greater than simply switching to the browser and hitting the F5 key... but you may wish to use this!
</p>

<h4>Production build details</h4>

<p>
    In a 'production' build the following takes place:
</p>

<ul class="list-standard">
    <li>linting is absent - you may wish to change this as there's a presumption that any warnings or errors have been picked up in a previous 'development' build</li>
    <li>compilation takes place</li>
    <li>files and directories in <b>assets</b> are processed or copied to the <b>dist</b> directory</li>
    <li>files are minified or concatenated and minified</li>
    <li>uses Node's <a href="https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback">child_process</a> module to execute the command, <code class="code-inline">node ./bin/www</code> to start the application</li>
</ul>

<p>
    <span class="note">Note</span>: Although the application can be started in the course of a 'production' build as outlined above, a real instance would make use of a process manager such as <a href="http://strong-pm.io/">StrongLoop</a> which will not only restart the application if and when it crashes but also manage other deployment issues and metrics.
</p>

<h2>Pug templating</h2>

<p>
    Having chosen Pug as the templating system there is a need to differentiate which built front-end resources should be loaded dependent on which Express environment the application is running under.
    For example, in a 'development' build more files result as there is no concatenation; in a 'production' build there may be a requirement for certain common libraries to be resourced from a Content Delivery Network plus also
    filenames of built files may differ with <b>*.min</b> suffixes.
</p>

<p>
    The project uses two approaches for comparison: firstly a 'HTML build block processor', in this case <a href="https://www.npmjs.com/package/gulp-processjade">gulp-processjade</a> (Jade being the old name for Pug).
    In <b>assets/views/layout.pug</b>:
</p>

<pre><code class="language-jade">doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title #{title} :: My website
    // build:css stylesheets/main.min.css
    link(rel='stylesheet', href='stylesheets/main.css')
    // /build
</code></pre>

<p>
    And secondly, the path to the front-end Javascript files also in <b>assets/views/layout.pug</b> is managed by use of a pug conditional block.
</p>

<pre><code class="language-jade">block scripts
    if settings.env === 'production'
        script(src='https://code.jquery.com/jquery-3.2.1.min.js')
        script(src='javascripts/site.min.js')
    else
        script(src='javascripts/static/jquery-3.2.1.min.js')
        //- required by IE9 to process javascript-based media queries - applies 
        //- patch if window.matchMedia() is unsupported
        script(src='javascripts/static/matchMedia.js')
        //- 'enquire.js' for javascript-based media queries.. requires 
        //- window.matchMedia() support.
        script(src='javascripts/static/enquire.min.js')
        script(src='javascripts/site.js')
</code></pre>

<p>
    And a third, even better option to differentially load front-end resources would be to use a dedicated Express asset manager tool such as <a href="https://www.npmjs.com/package/express-asset-manager">express-asset-manager</a> via npm.
</p>

<h2>Have a go</h2>

<p>
    This is just a working example with plenty of scope for further development but it will hopefully get you set up with a much further advanced front-end for your Node Express application dependent on what is to be achieved. There are interesting alternative approaches such as <a href="https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">using npm as a build tool</a> and using <a href="https://webpack.js.org/">Webpack</a> to bundle and process front-end resources. If you wish to examine the repo further then please clone from the GitHub repository at: <a href="https://github.com/nickbergquist/node-express-sass-workflow">https://github.com/nickbergquist/node-express-sass-workflow</a>
</p>

@section ScriptsBody {
    @{await Html.RenderPartialAsync("_CodeBlockPrismScriptsPartial"); }
}
